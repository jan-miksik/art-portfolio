/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace MessagePortal {
  export type MessageStruct = {
    text: PromiseOrValue<string>;
    from: PromiseOrValue<string>;
    datetime: PromiseOrValue<BigNumberish>;
  };

  export type MessageStructOutput = [string, string, BigNumber] & {
    text: string;
    from: string;
    datetime: BigNumber;
  };
}

export interface MessagePortalInterface extends utils.Interface {
  functions: {
    "getAllMessages()": FunctionFragment;
    "getTotalMessages()": FunctionFragment;
    "sendMessage(string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAllMessages"
      | "getTotalMessages"
      | "sendMessage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMessages",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;

  events: {
    "NewMessage(address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewMessage"): EventFragment;
}

export interface NewMessageEventObject {
  from: string;
  timestamp: BigNumber;
  message: string;
}
export type NewMessageEvent = TypedEvent<
  [string, BigNumber, string],
  NewMessageEventObject
>;

export type NewMessageEventFilter = TypedEventFilter<NewMessageEvent>;

export interface MessagePortal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MessagePortalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAllMessages(
      overrides?: CallOverrides
    ): Promise<[MessagePortal.MessageStructOutput[]]>;

    getTotalMessages(overrides?: CallOverrides): Promise<[BigNumber]>;

    sendMessage(
      _newMessage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getAllMessages(
    overrides?: CallOverrides
  ): Promise<MessagePortal.MessageStructOutput[]>;

  getTotalMessages(overrides?: CallOverrides): Promise<BigNumber>;

  sendMessage(
    _newMessage: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllMessages(
      overrides?: CallOverrides
    ): Promise<MessagePortal.MessageStructOutput[]>;

    getTotalMessages(overrides?: CallOverrides): Promise<BigNumber>;

    sendMessage(
      _newMessage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewMessage(address,uint256,string)"(
      from?: PromiseOrValue<string> | null,
      timestamp?: null,
      message?: null
    ): NewMessageEventFilter;
    NewMessage(
      from?: PromiseOrValue<string> | null,
      timestamp?: null,
      message?: null
    ): NewMessageEventFilter;
  };

  estimateGas: {
    getAllMessages(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalMessages(overrides?: CallOverrides): Promise<BigNumber>;

    sendMessage(
      _newMessage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllMessages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalMessages(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendMessage(
      _newMessage: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
